{"version":3,"sources":["List.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["Activity","props","className","type","name","item","onChange","event","completeActivity","id","checked","onClick","removeActivity","list","Activities","activities","activityList","map","index","CompletedActivities","completedActivities","List","Form","createActivity","activity","creationDate","Date","handleChange","setState","text","target","value","handleSubmit","preventDefault","handleSubmitForm","state","onSubmit","this","Component","App","addActivity","concat","filter","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82707856.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Activity =(props) => {\n    return (\n        <div className=\"activity\">\n            <input\n             type=\"checkbox\"\n             name={props.item}\n             onChange={(event)=>props.completeActivity(props.id, event)}\n             checked={props.checked} />\n            <div>{props.item}</div>\n            <div>\n                <button\n                 className=\"muted-button activity-button-delete\"\n                 onClick={()=>props.removeActivity(props.list, props.id)}>Delete</button>\n            </div>\n        </div>\n    )\n}\n\nconst Activities = (props) => {\n    const activities = props.activityList.map((item, index) => {\n        return (\n            <li key={item[\"name\"] + \"-\" + item[\"creationDate\"]}>\n                <Activity\n                 id={index}\n                 item={item[\"name\"]}\n                 removeActivity={props.removeActivity}\n                 completeActivity={props.completeActivity}\n                 list=\"activityList\"\n                 checked=\"\" />\n            </li>\n        )\n    })\n\n    return (\n        <ul className=\"activity-list\">{activities}</ul>\n    )\n  }\n\n  const CompletedActivities = (props) => {\n      const activities = props.completedActivities.map((item, index) => {\n          return (\n              <li key={item[\"name\"] + \"-\" + item[\"creationDate\"]}>\n                  <Activity\n                    id={index}\n                    item={item[\"name\"]}\n                    removeActivity={props.removeActivity}\n                    completeActivity={props.completeActivity}\n                    list=\"completedActivities\"\n                    checked=\"checked\" />\n              </li>\n          )\n      })\n\n      return (\n          <ul className=\"activity-list\">{activities}</ul>\n      )\n  }\n\nconst List = (props) => {\n    const {activityList, removeActivity, completeActivity, completedActivities} = props;\n\n    return (\n        <div>\n            <Activities\n            activityList={activityList}\n            removeActivity={removeActivity}\n            completeActivity={completeActivity} />\n            <CompletedActivities\n            activityList={activityList}\n            removeActivity={removeActivity}\n            completeActivity={completeActivity}\n            completedActivities={completedActivities} />\n         </div>\n    )\n}\n\nexport default List","import React, {Component} from 'react'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n        }\n    }\n\n    createActivity = (activity) => {\n        return {name: activity, creationDate: Date()}\n      }\n\n    handleChange = (event) => {\n        this.setState({\n            text: event.target.value,\n        });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.handleSubmitForm(\"activityList\", this.createActivity(this.state.text));\n    \n        this.setState({\n          text: \"\",\n        });\n      }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input\n                 type=\"text\"\n                 value={this.state.text}\n                 onChange={this.handleChange} />\n                <button\n                 className=\"full-button\"\n                 type=\"button\"\n                 onClick={this.handleSubmit}\n                >Add activity</button>\n            </form>\n        )\n    }\n}\n\n\nexport default Form","import React, {Component} from 'react'\nimport List from './List.js'\nimport Form from './Form.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      activityList: [],\n      completedActivities: [],\n    }\n  }\n\n  addActivity = (list, activity) => {\n    //if (!this.state.activityList.includes(activity)) {\n      this.setState({\n        [list]: this.state[list].concat([activity]),\n      });\n   // }\n  }\n\n  removeActivity = (list, index) => {\n    /* TODO\n      Make remove activity work with both checked and unchecked activities\n      */\n\n    this.setState({\n      [list]: this.state[list].filter((activity, i) => {\n        return i !== index;\n      })\n    });\n  }\n\n  completeActivity = (index, event) => {\n    if (event.target.checked) {\n      this.setState({\n        completedActivities: this.state.completedActivities.concat(\n          this.state.activityList[index]\n        )\n      });\n      this.removeActivity(\"activityList\", index);\n    }\n    else {\n      this.addActivity(\"activityList\", this.state.completedActivities[index]);\n      this.setState({\n        completedActivities: this.state.completedActivities.filter((activity, i) => {\n            return i !== index;\n          }\n        )\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"small-container\">\n        <h1>Todooly</h1>\n        <Form handleSubmitForm={this.addActivity} />\n        <List\n         activityList={this.state.activityList}\n         removeActivity={this.removeActivity} \n         completeActivity={this.completeActivity}\n         completedActivities={this.state.completedActivities} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}